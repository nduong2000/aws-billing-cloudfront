name: Deploy Medical Billing Frontend to AWS CloudFront

on:
  push:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  S3_BUCKET: medical-billing-frontend-20250525
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests (if any)
      run: npm test --if-present

    - name: Build application
      run: npm run build

    - name: Configure AWS credentials (alternative method)
      run: |
        echo "Setting up AWS credentials via environment variables..."
        mkdir -p ~/.aws
        cat > ~/.aws/credentials << EOF
        [default]
        aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        EOF
        cat > ~/.aws/config << EOF
        [default]
        region = ${{ env.AWS_REGION }}
        output = json
        EOF
        chmod 600 ~/.aws/credentials ~/.aws/config

    - name: Test AWS credentials
      run: |
        echo "Testing AWS credentials..."
        aws sts get-caller-identity
        echo "AWS credentials working! ✅"

    - name: Configure existing S3 bucket
      run: |
        echo "Configuring existing S3 bucket: ${{ env.S3_BUCKET }}"
        
        # Configure bucket for static website hosting
        aws s3 website s3://${{ env.S3_BUCKET }} \
          --index-document index.html \
          --error-document index.html
        
        echo "S3 bucket configured successfully! ✅"

    - name: Deploy to S3
      run: |
        echo "Deploying files to S3..."
        
        # Sync static assets with long cache
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
          --delete \
          --cache-control "max-age=31536000,public,immutable" \
          --exclude "*.html" \
          --exclude "*.json"
        
        # Sync HTML files with no cache
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
          --delete \
          --cache-control "max-age=0,no-cache,no-store,must-revalidate" \
          --include "*.html"
        
        # Sync manifest and config files with short cache
        aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
          --delete \
          --cache-control "max-age=300,public" \
          --include "*.json"
        
        echo "Files deployed to S3 successfully! ✅"

    - name: Invalidate CloudFront cache
      run: |
        echo "Invalidating CloudFront cache..."
        INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*" \
          --query 'Invalidation.Id' \
          --output text)
        
        echo "Invalidation ID: $INVALIDATION_ID"
        echo "CloudFront cache invalidation started! ✅"
        
        # Additional aggressive invalidation for edge cases
        echo "Creating additional invalidation for specific assets..."
        ADDITIONAL_INVALIDATION_ID=$(aws cloudfront create-invalidation \
          --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/index.html" "/assets/*" \
          --query 'Invalidation.Id' \
          --output text)
        
        echo "Additional invalidation ID: $ADDITIONAL_INVALIDATION_ID"
        echo "Additional invalidation created! ✅"
        echo ""
        echo "⏳ Note: Cache invalidation takes 2-5 minutes to propagate globally"
        echo "🔄 If changes don't appear immediately, try hard refresh (Ctrl+F5)"

    - name: Deploy summary
      run: |
        echo ""
        echo "🎉 Deployment completed successfully!"
        echo ""
        echo "📦 S3 Bucket: ${{ env.S3_BUCKET }}"
        echo "📱 S3 Website: http://${{ env.S3_BUCKET }}.s3-website-${{ env.AWS_REGION }}.amazonaws.com"
        echo "🌍 Region: ${{ env.AWS_REGION }}"
        echo ""
        if [ -n "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          CLOUDFRONT_DOMAIN=$(aws cloudfront get-distribution --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)
          echo "🌐 CloudFront: https://$CLOUDFRONT_DOMAIN"
          echo ""
        fi
        echo "✨ Your Medical Billing Frontend is now live!! ✨"